import React, { useState, useEffect } from 'react';
import { Bell, Video, FileText, Users, Clock, Settings, Download, Eye, CheckCircle, XCircle, AlertCircle } from 'lucide-react';

const DoctorDashboard = () => {
  const [isAvailable, setIsAvailable] = useState(false);
  const [patientLimit, setPatientLimit] = useState(10);
  const [videoConsultation, setVideoConsultation] = useState(true);
  const [onlineConsultation, setOnlineConsultation] = useState(true);
  const [selectedPatient, setSelectedPatient] = useState(null);
  const [showPDFPreview, setShowPDFPreview] = useState(false);

  // Sample patient data with priority system
  const [patients, setPatients] = useState([
    {
      id: 1,
      name: "John Smith",
      age: 45,
      priority: "high",
      consultationType: "video",
      waitTime: 15,
      symptoms: "Chest pain, shortness of breath",
      medicalHistory: "Hypertension, Diabetes Type 2",
      currentMedications: "Metformin 500mg, Lisinopril 10mg",
      allergies: "Penicillin",
      vitalSigns: { bp: "140/90", pulse: "88", temp: "98.6°F" },
      status: "waiting",
      appointmentTime: "10:30 AM"
    },
    {
      id: 2,
      name: "Sarah Johnson",
      age: 32,
      priority: "medium",
      consultationType: "online",
      waitTime: 8,
      symptoms: "Persistent headache, nausea",
      medicalHistory: "Migraine history",
      currentMedications: "Sumatriptan as needed",
      allergies: "None known",
      vitalSigns: { bp: "120/80", pulse: "72", temp: "99.1°F" },
      status: "waiting",
      appointmentTime: "11:00 AM"
    },
    {
      id: 3,
      name: "Michael Brown",
      age: 28,
      priority: "low",
      consultationType: "video",
      waitTime: 5,
      symptoms: "Common cold symptoms, runny nose",
      medicalHistory: "No significant history",
      currentMedications: "None",
      allergies: "None known",
      vitalSigns: { bp: "118/75", pulse: "68", temp: "100.2°F" },
      status: "waiting",
      appointmentTime: "11:30 AM"
    }
  ]);

  const [notifications, setNotifications] = useState([]);

  // Handle availability toggle and notify patients
  const handleAvailabilityToggle = () => {
    setIsAvailable(!isAvailable);
    if (!isAvailable) {
      // Notify online patients when doctor becomes available
      const onlinePatients = patients.filter(p => p.status === 'waiting');
      const newNotifications = onlinePatients.map(patient => ({
        id: Date.now() + patient.id,
        message: `Dr. Smith is now available for consultation`,
        patientId: patient.id,
        timestamp: new Date().toLocaleTimeString()
      }));
      setNotifications(prev => [...prev, ...newNotifications]);
    }
  };

  const getPriorityColor = (priority) => {
    switch (priority) {
      case 'high': return 'text-red-600 bg-red-50';
      case 'medium': return 'text-yellow-600 bg-yellow-50';
      case 'low': return 'text-green-600 bg-green-50';
      default: return 'text-gray-600 bg-gray-50';
    }
  };

  const getPriorityIcon = (priority) => {
    switch (priority) {
      case 'high': return <AlertCircle className="w-4 h-4" />;
      case 'medium': return <Clock className="w-4 h-4" />;
      case 'low': return <CheckCircle className="w-4 h-4" />;
      default: return <Clock className="w-4 h-4" />;
    }
  };

  const sortedPatients = [...patients].sort((a, b) => {
    const priorityOrder = { high: 3, medium: 2, low: 1 };
    return priorityOrder[b.priority] - priorityOrder[a.priority];
  });

  const generatePDF = (patient) => {
    // Simulate PDF generation
    const pdfContent = `
MEDICAL CONSULTATION REPORT
============================

Patient Information:
- Name: ${patient.name}
- Age: ${patient.age}
- Date: ${new Date().toLocaleDateString()}
- Time: ${patient.appointmentTime}

Chief Complaint:
${patient.symptoms}

Medical History:
${patient.medicalHistory}

Current Medications:
${patient.currentMedications}

Allergies:
${patient.allergies}

Vital Signs:
- Blood Pressure: ${patient.vitalSigns.bp}
- Pulse Rate: ${patient.vitalSigns.pulse}
- Temperature: ${patient.vitalSigns.temp}

Consultation Type: ${patient.consultationType.toUpperCase()}
Priority Level: ${patient.priority.toUpperCase()}

Doctor's Assessment:
[To be filled during consultation]

Treatment Plan:
[To be determined]

Follow-up:
[As needed]

---
Generated by Medical Dashboard System
Dr. Smith, MD
`;

    // Create a downloadable PDF-like text file
    const blob = new Blob([pdfContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `medical-report-${patient.name.replace(' ', '-')}-${Date.now()}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const viewPatientDetails = (patient) => {
    setSelectedPatient(patient);
  };

  const startConsultation = (patientId) => {
    setPatients(prev => prev.map(p => 
      p.id === patientId ? { ...p, status: 'in-consultation' } : p
    ));
  };

  const completeConsultation = (patientId) => {
    setPatients(prev => prev.map(p => 
      p.id === patientId ? { ...p, status: 'completed' } : p
    ));
  };

  return (
    <div className="min-h-screen bg-gray-50 p-6">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="bg-white rounded-lg shadow-md p-6 mb-6">
          <div className="flex justify-between items-center">
            <h1 className="text-3xl font-bold text-gray-800">Doctor Dashboard</h1>
            <div className="flex items-center space-x-4">
              <div className="flex items-center space-x-2">
                <span className="text-gray-600">Status:</span>
                <button
                  onClick={handleAvailabilityToggle}
                  className={`flex items-center space-x-2 px-4 py-2 rounded-lg font-medium transition-colors ${
                    isAvailable 
                      ? 'bg-green-100 text-green-800 hover:bg-green-200' 
                      : 'bg-red-100 text-red-800 hover:bg-red-200'
                  }`}
                >
                  {isAvailable ? <CheckCircle className="w-4 h-4" /> : <XCircle className="w-4 h-4" />}
                  {isAvailable ? 'Available' : 'Unavailable'}
                </button>
              </div>
              <Bell className="w-6 h-6 text-gray-600" />
            </div>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Settings Panel */}
          <div className="lg:col-span-1">
            <div className="bg-white rounded-lg shadow-md p-6 mb-6">
              <h2 className="text-xl font-semibold text-gray-800 mb-4 flex items-center">
                <Settings className="w-5 h-5 mr-2" />
                Consultation Settings
              </h2>
              
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Patient Limit per Day
                  </label>
                  <input
                    type="number"
                    value={patientLimit}
                    onChange={(e) => setPatientLimit(parseInt(e.target.value))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    min="1"
                    max="50"
                  />
                </div>

                <div className="space-y-3">
                  <div className="flex items-center justify-between">
                    <span className="flex items-center text-sm font-medium text-gray-700">
                      <Video className="w-4 h-4 mr-2" />
                      Video Consultation
                    </span>
                    <button
                      onClick={() => setVideoConsultation(!videoConsultation)}
                      className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
                        videoConsultation ? 'bg-blue-600' : 'bg-gray-200'
                      }`}
                    >
                      <span className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                        videoConsultation ? 'translate-x-6' : 'translate-x-1'
                      }`} />
                    </button>
                  </div>

                  <div className="flex items-center justify-between">
                    <span className="flex items-center text-sm font-medium text-gray-700">
                      <FileText className="w-4 h-4 mr-2" />
                      Online Form Consultation
                    </span>
                    <button
                      onClick={() => setOnlineConsultation(!onlineConsultation)}
                      className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
                        onlineConsultation ? 'bg-blue-600' : 'bg-gray-200'
                      }`}
                    >
                      <span className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                        onlineConsultation ? 'translate-x-6' : 'translate-x-1'
                      }`} />
                    </button>
                  </div>
                </div>
              </div>
            </div>

            {/* Notifications */}
            <div className="bg-white rounded-lg shadow-md p-6">
              <h2 className="text-xl font-semibold text-gray-800 mb-4 flex items-center">
                <Bell className="w-5 h-5 mr-2" />
                Notifications
              </h2>
              <div className="space-y-2 max-h-40 overflow-y-auto">
                {notifications.length === 0 ? (
                  <p className="text-gray-500 text-sm">No new notifications</p>
                ) : (
                  notifications.map(notification => (
                    <div key={notification.id} className="bg-blue-50 p-3 rounded-lg">
                      <p className="text-sm text-blue-800">{notification.message}</p>
                      <p className="text-xs text-blue-600">{notification.timestamp}</p>
                    </div>
                  ))
                )}
              </div>
            </div>
          </div>

          {/* Patient Queue */}
          <div className="lg:col-span-2">
            <div className="bg-white rounded-lg shadow-md p-6">
              <h2 className="text-xl font-semibold text-gray-800 mb-4 flex items-center">
                <Users className="w-5 h-5 mr-2" />
                Patient Queue ({sortedPatients.filter(p => p.status === 'waiting').length}/{patientLimit})
              </h2>

              <div className="space-y-4">
                {sortedPatients.map(patient => (
                  <div key={patient.id} className="border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-4">
                        <div className={`px-3 py-1 rounded-full text-xs font-medium flex items-center space-x-1 ${getPriorityColor(patient.priority)}`}>
                          {getPriorityIcon(patient.priority)}
                          <span>{patient.priority.toUpperCase()}</span>
                        </div>
                        <div>
                          <h3 className="font-semibold text-gray-800">{patient.name}</h3>
                          <p className="text-sm text-gray-600">Age: {patient.age} | Wait: {patient.waitTime} min</p>
                        </div>
                      </div>
                      
                      <div className="flex items-center space-x-2">
                        <span className={`px-2 py-1 rounded-full text-xs font-medium flex items-center space-x-1 ${
                          patient.consultationType === 'video' ? 'bg-purple-100 text-purple-800' : 'bg-green-100 text-green-800'
                        }`}>
                          {patient.consultationType === 'video' ? <Video className="w-3 h-3" /> : <FileText className="w-3 h-3" />}
                          <span>{patient.consultationType}</span>
                        </span>
                        
                        <button
                          onClick={() => viewPatientDetails(patient)}
                          className="p-2 text-blue-600 hover:bg-blue-50 rounded-lg transition-colors"
                          title="View Details"
                        >
                          <Eye className="w-4 h-4" />
                        </button>
                        
                        <button
                          onClick={() => generatePDF(patient)}
                          className="p-2 text-green-600 hover:bg-green-50 rounded-lg transition-colors"
                          title="Generate PDF"
                        >
                          <Download className="w-4 h-4" />
                        </button>

                        {patient.status === 'waiting' && (
                          <button
                            onClick={() => startConsultation(patient.id)}
                            className="px-3 py-1 bg-blue-600 text-white text-sm rounded-lg hover:bg-blue-700 transition-colors"
                            disabled={!isAvailable}
                          >
                            Start
                          </button>
                        )}

                        {patient.status === 'in-consultation' && (
                          <button
                            onClick={() => completeConsultation(patient.id)}
                            className="px-3 py-1 bg-green-600 text-white text-sm rounded-lg hover:bg-green-700 transition-colors"
                          >
                            Complete
                          </button>
                        )}
                      </div>
                    </div>
                    
                    <div className="mt-3 pt-3 border-t border-gray-100">
                      <p className="text-sm text-gray-600">
                        <span className="font-medium">Symptoms:</span> {patient.symptoms}
                      </p>
                      <p className="text-sm text-gray-600 mt-1">
                        <span className="font-medium">Appointment:</span> {patient.appointmentTime} | 
                        <span className="font-medium"> Status:</span> 
                        <span className={`ml-1 px-2 py-1 rounded text-xs ${
                          patient.status === 'waiting' ? 'bg-yellow-100 text-yellow-800' :
                          patient.status === 'in-consultation' ? 'bg-blue-100 text-blue-800' :
                          'bg-green-100 text-green-800'
                        }`}>
                          {patient.status.replace('-', ' ').toUpperCase()}
                        </span>
                      </p>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>

        {/* Patient Details Modal */}
        {selectedPatient && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
            <div className="bg-white rounded-lg max-w-2xl w-full max-h-96 overflow-y-auto">
              <div className="p-6">
                <div className="flex justify-between items-center mb-4">
                  <h3 className="text-xl font-semibold">Patient Details - {selectedPatient.name}</h3>
                  <button
                    onClick={() => setSelectedPatient(null)}
                    className="text-gray-500 hover:text-gray-700"
                  >
                    <XCircle className="w-6 h-6" />
                  </button>
                </div>
                
                <div className="grid grid-cols-2 gap-4 text-sm">
                  <div>
                    <h4 className="font-semibold mb-2">Patient Information</h4>
                    <p><span className="font-medium">Name:</span> {selectedPatient.name}</p>
                    <p><span className="font-medium">Age:</span> {selectedPatient.age}</p>
                    <p><span className="font-medium">Priority:</span> {selectedPatient.priority}</p>
                    <p><span className="font-medium">Consultation Type:</span> {selectedPatient.consultationType}</p>
                  </div>
                  
                  <div>
                    <h4 className="font-semibold mb-2">Vital Signs</h4>
                    <p><span className="font-medium">Blood Pressure:</span> {selectedPatient.vitalSigns.bp}</p>
                    <p><span className="font-medium">Pulse:</span> {selectedPatient.vitalSigns.pulse}</p>
                    <p><span className="font-medium">Temperature:</span> {selectedPatient.vitalSigns.temp}</p>
                  </div>
                  
                  <div className="col-span-2">
                    <h4 className="font-semibold mb-2">Medical History</h4>
                    <p className="mb-2">{selectedPatient.medicalHistory}</p>
                    
                    <h4 className="font-semibold mb-2">Current Symptoms</h4>
                    <p className="mb-2">{selectedPatient.symptoms}</p>
                    
                    <h4 className="font-semibold mb-2">Current Medications</h4>
                    <p className="mb-2">{selectedPatient.currentMedications}</p>
                    
                    <h4 className="font-semibold mb-2">Allergies</h4>
                    <p>{selectedPatient.allergies}</p>
                  </div>
                </div>
                
                <div className="mt-6 flex space-x-3">
                  <button
                    onClick={() => generatePDF(selectedPatient)}
                    className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 flex items-center space-x-2"
                  >
                    <Download className="w-4 h-4" />
                    <span>Generate PDF</span>
                  </button>
                  <button
                    onClick={() => setSelectedPatient(null)}
                    className="px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700"
                  >
                    Close
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default DoctorDashboard;